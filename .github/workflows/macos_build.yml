# Stolen from https://github.com/pbek/QOwnNotes/blob/main/.github/workflows/build-release-qt6.yml
name: MacOS Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'master'

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  EXECUTABLE: "glr-database"
  APPLICATION: "glr-database"
  UNIXNAME: "glr-database"
  QMAKE_PROJECT: "glr-database.pro"
  REPO_DIR: "/home/runner/work/glr-database"
  QT_MODULES: "qtwebsockets qt5compat"
  QMAKE: qmake6
  CORES: 16

jobs:

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

  #
  # AppImage build
  #
  build-appimage:
    runs-on: ubuntu-20.04
    env:
      QT_VERSION: 6.5.0
      BUILD_DIR: build
    name: '🐧 AppImage Ubuntu 20.04'
    steps:

      - name: '🧰 Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: '⚙️ Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '⚙️ Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          aqtversion: '==2.0.0'
          cache: ${{steps.cache-qt.outputs.cache-hit}}

      - name: '⚙️ Install dependencies'
        run: |
          sudo apt-get update
          # sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev
          sudo apt install desktop-file-utils libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxkbcommon-x11-0
      
      - name: '🚧 Compile application'
        run: |
          echo "#define RELEASE \"AppImage\"" > release.h
          ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          lrelease glr-database.pro
          make -j${{env.CORES}}
          
      - name: '⚙️ Install linuxdeploy'
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          
      - name: '📦 Create AppImage'
        run: |
          export QMAKE=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/bin/${{env.QMAKE}}
          export PATH=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/libexec:$PATH
          #cp ../icons/icon.png QOwnNotes.png
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} -e ${{env.UNIXNAME}} -i ${{env.UNIXNAME}}.png -d PBE.QOwnNotes.desktop --plugin qt
          mkdir -p ${{env.BUILD_DIR}}/usr/plugins/iconengines && cp -r ${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/plugins/iconengines/libqsvgicon.so ${{env.BUILD_DIR}}/usr/plugins/iconengines
          mkdir -p ${{env.BUILD_DIR}}/usr/languages && cp -r languages/*.qm ${{env.BUILD_DIR}}/usr/languages
          cp -rL ${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/lib/libQt6QmlWorkerScript.so.6 ${{env.BUILD_DIR}}/usr/lib
          find ${{env.BUILD_DIR}}
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} --output appimage
          rm linuxdeploy-x86_64.AppImage
          rm linuxdeploy-plugin-qt-x86_64.AppImage
          ls -hal *.AppImage
          find -iname "*.AppImage"
          # It's ok if no file needs to be renamed
          mv *.AppImage ${{env.EXECUTABLE}}-x86_64.AppImage ||:
          sha256sum ${{env.EXECUTABLE}}-x86_64.AppImage > ${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
          ls -hal *.AppImage
          find -iname "*.AppImage"
          pwd

      - name: '📤 Upload artifact: AppImage'
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-x86_64.AppImage
          path: src/${{env.EXECUTABLE}}-x86_64.AppImage
          
      - name: '📤 Upload artifact: AppImage sha256sum'
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
          path: src/${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum

  #
  # Snap build
  #
  # build-snap:
    # runs-on: ubuntu-latest
    # env:
      # QT_VERSION: 6.5.0
    # continue-on-error: true
    # name: '🐧 Snap Ubuntu 18.04'
    # steps:

      # - name: '🧰 Checkout'
        # uses: actions/checkout@v4
        # with:
          # submodules: recursive

      # - name: '⚙️ Set Env'
        # shell: bash
        # run: |
          # export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          # echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # - name: '⚙️ Cache Qt'
        # id: cache-qt
        # uses: actions/cache@v4
        # with:
          # path: Qt
          # key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      # - name: '⚙️ Install Qt'
        # uses: jurplel/install-qt-action@v3
        # with:
          # version: ${{env.QT_VERSION}}
          # modules: ${{env.QT_MODULES}}
          # aqtversion: '==2.0.0'
          # cache: ${{steps.cache-qt.outputs.cache-hit}}

      # - name: '⚙️ Printenv'
        # shell: bash
        # run: |
          # echo "VERSION=${VERSION}"
          # printenv

      # - name: '🚧 Compile application'
        # # https://github.com/snapcore/action-build
        # uses: snapcore/action-build@v1
        # id: snapcraft
        # with:
          # path: build-systems/github/snap.qt6

      # - name: '📤 Upload artifact: Snap'
        # uses: actions/upload-artifact@v4
        # with:
          # name: qownnotes_${{ env.VERSION }}_amd64.snap
          # path: /home/runner/work/QOwnNotes/QOwnNotes/qownnotes_${{ env.VERSION }}_amd64.snap

  #
  # Windows build
  #
  # build-windows:
    # name: '🧊 Windows Server 2019'
    # # https://github.com/pbek/QOwnNotes/issues/2558 error on windows-2022!
    # runs-on: windows-2019
    # env:
      # # Qt 6.5 windeployqt doesn't deploy DLLs!
      # QT_VERSION: 6.4.2
    # continue-on-error: true
    # steps:

      # - name: '🧰 Checkout'
        # uses: actions/checkout@v4
        # with:
          # submodules: recursive

      # - name: '⚙️ Cache Qt'
        # id: cache-qt
        # uses: actions/cache@v4
        # with:
          # path: Qt
          # key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      # - name: '⚙️ Install Qt'
        # uses: jurplel/install-qt-action@v3
        # with:
          # aqtversion: '==2.0.0'
          # version: ${{env.QT_VERSION}}
          # # https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_650/qt.qt6.650.win64_mingw/
          # # https://aqtinstall.readthedocs.io/en/latest/getting_started.html
          # # https://ddalcino.github.io/aqt-list-server/
          # arch: win64_mingw
          # modules: ${{env.QT_MODULES}}
          # cache: ${{ steps.cache-qt.outputs.cache-hit }}

      # - name: '⚙️ Set Env'
        # shell: bash
        # run: |
          # export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          # echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # - name: '⚙️ Printenv'
        # shell: bash
        # run: |
          # echo "VERSION=${VERSION}"
          # printenv

      # - name: '🚧 Compile application'
        # run: '& ..\build-systems\github\windows\build-zip-qt6.ps1'

      # - name: '📤 Upload artifact: Windows'
        # uses: actions/upload-artifact@v4
        # with:
          # name: QOwnNotes.zip
          # path: QOwnNotes.zip
      # - name: '📤 Upload artifact: Windows sha256sum'
        # uses: actions/upload-artifact@v4
        # with:
          # name: QOwnNotes.zip.sha256
          # path: QOwnNotes.zip.sha256


  #
  # macOS build
  #
  build-macos:
    name: '🍎 macOS Monterey'
    runs-on: macos-latest
    env:
      QT_VERSION: 6.5.0
    steps:

      - name: '🧰 Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
      - name: '⚙️ Cache Qt'
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: '⚙️ Install Qt'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          aqtversion: '==2.0.0'
          cache: ${{steps.cache-qt.outputs.cache-hit}}

      - name: '⚙️ Set Env'
        shell: bash
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: '⚙️ Printenv'
        shell: bash
        run: |
          echo "VERSION=${VERSION}"
          printenv

      - name: '🚧 Compile application'
        run: |
          echo "#define RELEASE \"GitHub Actions\"" > release.h
          lrelease glr-database.pro
          ${{env.QMAKE}}
          make -j ${{env.CORES}}
          ${Qt6_DIR}/bin/macdeployqt ./glr-database.app

      - name: '📤 Upload artifact: macOS'
        uses: actions/upload-artifact@v4
        with:
          name: glr-database.dmg
          path: glr-database.dmg